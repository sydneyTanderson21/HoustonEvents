user www-data;
#user nginx_user;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

#include /etc/nginx/sites-enabled/*;

events {
  worker_connections 1024; # increase if you have lots of clients
  # accept_mutex off; # set to 'on' if nginx worker_processes > 1
}
http { 
    include mime.types;
    # fallback in case we can't determine a type
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log combined;
    sendfile on;
    keepalive_timeout  65;

    upstream django {
        server 127.0.0.1:29000;
    }

    server { # define a virtual server in the http context
        # spcifies the IP addy and port which the server listens for requests
        # address:port 
        # 80 is the default HTTP port, and 8000 is an alt HTTP port used by some firewalls
        #listen *:80 | *:8000;
        listen 80 default_server;
        listen [::]:80 default_server;

        # basically specifies the file system path in which to search for static files to serve
        # root = this is where nginx reads its html files from and where our React app static files are stored at
        root /usr/share/nginx/html;

        # i think this would be = https://example.com:80 or :8000
        # server name of the virtual host which process the request
        # to host more than 1 domain on a single server
        # must coincide with the server's access point. This can either be the IP address or domain name.
        server_name _;
        
        # Matching URI will be added to the path specific to root
        # Serve the built front end assets
        location / {
            #Directs everything to index.html
            index index.html index.htm;

            #needed for navigating to defined routes, if not found index.html is returned
            try_files $uri $uri/ /index.html = 404;
        }

        # error_page 500 502 503 504 /500.html;
        # location = /500.html {
        # root /path/to/app/current/public;
        # }

    }
    
}